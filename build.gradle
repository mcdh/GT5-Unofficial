buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'org.ow2.asm:asm-debug-all:5.0.3'
        classpath 'com.google.guava:guava:18.0'
        classpath 'net.sf.opencsv:opencsv:2.3' // reading CSVs.. also used by SpecialSource
        classpath 'com.cloudbees:diff4j:1.1' // for difing and patching
        classpath 'com.github.abrarsyed.jastyle:jAstyle:1.2' // formatting
        classpath 'net.sf.trove4j:trove4j:2.1.0' // because its awesome.
        classpath 'com.github.jponge:lzma-java:1.3' // replaces the LZMA binary
        classpath 'com.nothome:javaxdelta:2.0.1' // GDIFF implementation for BinPatches
        classpath 'com.google.code.gson:gson:2.2.4' // Used instead of Argo for buuilding changelog.
        classpath 'com.github.tony19:named-regexp:0.2.3' // 1.7 Named regexp features
        classpath 'net.md-5:SpecialSource:1.7.3' // deobf and reobs
        classpath 'org.apache.httpcomponents:httpclient:4.3.3'
        classpath 'org.apache.httpcomponents:httpmime:4.3.3'
        classpath 'de.oceanlabs.mcp:RetroGuard:3.6.6'
        classpath 'de.oceanlabs.mcp:mcinjector:3.2-SNAPSHOT'
        classpath 'net.minecraftforge.srg2source:Srg2Source:3.2-SNAPSHOT'
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-CUSTOM'
    }
}

apply plugin: 'forge'
apply plugin: 'idea'
apply plugin: 'signing'

file "build.properties" withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

version = "${config.gt.version}"
group= "gregtech"
archivesBaseName = "gregtech"

sourceCompatibility = targetCompatibility = 1.8

minecraft {
    version = "${config.minecraft.version}-${config.forge.version}"
    runDir = "eclipse"

}

idea { module { inheritOutputDirs = true } }

configurations {
    provided
    embedded
    compile.extendsFrom provided, embedded
}

repositories {
    mavenLocal()
//    maven {
//        name 'Forge'
//        url 'http://files.minecraftforge.net/maven'
//    }
    maven {
        name = "chickenbones"
        url = "http://chickenbones.net/maven/"
    }
    maven {
        name = "ic2, forestry"
        url = "http://maven.ic2.player.to/"
    }
    maven { // EnderIO & EnderCore
        name 'tterrag Repo'
        url "http://maven.tterrag.com"
    }
    maven { // TConstruct
        name 'DVS1 Maven FS'
        url 'http://dvs1.progwml6.com/files/maven'
    }
    
    maven { // AppleCore
        url "http://www.ryanliptak.com/maven/"
    }
    maven { // GalacticGreg, YAMCore,..
        name 'UsrvDE'
        url "http://jenkins.usrv.eu:8081/nexus/content/repositories/releases/"
    }
	ivy {
        name 'gtnh_download_source_stupid_underscore_typo'
        artifactPattern "http://downloads.gtnewhorizons.com/Mods_for_Jenkins/[module]_[revision].[ext]"
    }

	ivy {
        name 'gtnh_download_source'
        artifactPattern "http://downloads.gtnewhorizons.com/Mods_for_Jenkins/[module]-[revision].[ext]"
    }
}

dependencies {
	compile "eu.usrv:YAMCore:${config.minecraft.version}-${config.yamcore.version}:deobf"
	compile "tconstruct:TConstruct:${config.minecraft.version}-${config.tconstruct.version}:deobf"
	compile "mantle:Mantle:${config.minecraft.version}-${config.mantle.version}:deobf"
	provided ("appeng:appliedenergistics2:${config.ae2.version}:dev") {
        exclude module: '*'
    }
//    provided "codechicken:CodeChickenLib:${config.minecraft.version}-${config.codechickenlib.version}:dev"
//    provided "codechicken:CodeChickenCore:${config.minecraft.version}-${config.codechickencore.version}:dev"
//    provided "codechicken:NotEnoughItems:${config.minecraft.version}-${config.nei.version}:dev"
    provided "codechicken:Translocator:${config.minecraft.version}-${config.translocators.version}:dev"
//    provided "net.industrial-craft:industrialcraft-2:${config.ic2.version}:dev"
    provided "net.sengir.forestry:forestry_${config.minecraft.version}:${config.forestry.version}:dev"
    provided "applecore:AppleCore:${config.applecore.version}:api"
    provided "com.enderio.core:EnderCore:${config.enderiocore.version}:dev"
    provided ("com.enderio:EnderIO:${config.enderio.version}:dev") {
        transitive = false
    }
    compile files("libs/Galacticraft-API-1.7-${config.gc.version}.jar")
    compile files("libs/GalacticraftCore-Dev-${config.gc.version}.jar")
    provided name: "Galacticraft-API", version: config.gc.version, ext: 'jar'
    provided name: "GalacticraftCore-Dev", version: config.gc.version, ext: 'jar'
//    provided name: 'CoFHLib', version: config.cofhlib.version, ext: 'jar'
//    provided name: 'CoFHCore', version: config.cofhcore.version, ext: 'jar'
    provided name: 'Railcraft', version: config.railcraft.version, ext: 'jar'
    provided name: 'IC2NuclearControl', version: config.nc.version, ext: 'jar'
  //provided name: 'ImmersiveEngineering', version: config.immeng.version, ext: 'jar'
  //provided name: 'magneticraft', version: config.magneticraft.version, ext: 'jar'
  compile fileTree(dir: "libs/", includes: ['*.jar'])
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
	exclude '**/Thumbs.db'
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task devJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
    manifest {
        //attributes 'FMLCorePlugin': 'WhateverLoaderClass'
        //attributes 'FMLCorePluginContainsFMLMod': 'true'
    }
}

artifacts {
    archives devJar
}

task signJar(dependsOn: 'reobf'){
    doLast {
        ant.signjar(
            destDir: jar.destinationDir,
            jar: jar.getArchivePath(),
            alias: findProperty('keyStoreAlias') ?: '',
            keystore: findProperty('keyStore') ?: '',
            storepass: findProperty('keyStorePass') ?: '',
            digestalg: findProperty('signDigestAlg') ?: '',
            tsaurl: findProperty('signTSAurl') ?: '',
            verbose: true
            )
    }
}
